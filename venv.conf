function venv() {
  # Check if Python 3.11 is installed
  if ! command -v python3.11 >/dev/null 2>&1; then
    echo "Error: Python 3.11 is not installed or not in PATH."
    return 1
  fi

  # Check if the name is passed for the virtual environment
  if [ -z "$1" ]; then
    echo "Usage: venv <environment_name>"
    return 1
  fi

  # Check that the environment name is correct (only letters, numbers, hyphens and underscores)
  if [[ ! "$1" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo "Error: Environment name '$1' is invalid. Use only letters, digits, hyphens, and underscores."
    return 1
  fi

  # Check if an environment with this name exists
  if [ -d "$1" ]; then
    echo "Error: Virtual environment '$1' already exists. Choose a different name or delete it."
    return 1
  fi

  # Create virtual environment
  python3.11 -m venv "$1"
  if [ $? -ne 0 ]; then
    echo "Failed to create virtual environment."
    return 1
  fi

  # Activate virtual environment
  source "$1/bin/activate"
  if [ $? -ne 0 ]; then
    echo "Failed to activate virtual environment."
    return 1
  fi

  echo "Virtual environment '$1' created and activated."

  # Install Ansible 2.9 Ð¸ Jinja2
  pip install --upgrade pip
  pip install "ansible==2.9.*" jinja2
  if [ $? -ne 0 ]; then
    echo "Failed to install Ansible 2.9 and Jinja2."
    deactivate
    return 1
  fi

  echo "Ansible 2.9 and Jinja2 installed successfully in the virtual environment '$1'."

  # Create ansible.cfg with the specified parameters
  ansible_cfg_content="
[defaults]
gathering = smart
forks = 20

[ssh_connection]
pipelining = True
ssh_args = -o ControlMaster=auto -o ControlPersist=15m
transfer_method = piped
"

  # Save configuration in ansible.cfg
  echo "$ansible_cfg_content" > "$1/ansible.cfg"

  if [ $? -eq 0 ]; then
    echo "Ansible configuration file created at '$1/ansible.cfg'."
  else
    echo "Failed to create ansible.cfg."
    deactivate
    return 1
  fi
}
